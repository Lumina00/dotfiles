#!/usr/bin/nft -f
define private = 172.30.1.0/24 
define ssh = 63210

table ip filter {
        chain input {
                type filter hook input priority 0; policy accept;
        }

        chain forward {
                type filter hook forward priority 0; policy accept;
                counter jump DOCKER-USER
                counter jump DOCKER-ISOLATION-STAGE-1
                oifname "docker0" ct state established,related counter accept
                oifname "docker0" counter jump DOCKER
                iifname "docker0" oifname != "docker0" counter accept
                iifname "docker0" oifname "docker0" counter accept
        }
        chain output {
                type filter hook input priority 0; policy accept;
        }
        chain DOCKER { 
        }
        chain DOCKER-ISOLATION-STAGE-1 {
                iifname "docker0" oifname != "docker0" counter jump DOCKER-ISOLATION-STAGE-2
                counter return
        }
        chain DOCKER-ISOLATION-STAGE-2 {
                oifname "docker0" counter drop
                counter return
        }
        chain DOCKER-USER { 
                counter return
        }
}
table inet filter {
  chain private {
    meta l4proto { tcp, udp } th dport 2049 accept comment "Accept NFS"

    udp dport netbios-ns accept comment "Accept NetBIOS Name Service (nmbd)"
    udp dport netbios-dgm accept comment "Accept NetBIOS Datagram Service (nmbd)"
    tcp dport netbios-ssn accept comment "Accept NetBIOS Session Service (smbd)"
    tcp dport microsoft-ds accept comment "Accept Microsoft Directory Service (smbd)"
    udp sport { bootpc, 4011 } udp dport { bootps, 4011 } accept comment "Accept PXE"
    udp dport tftp accept comment "Accept TFTP"
    tcp dport 1714-1764 tcp sport 1714-1764 accept comment "KDE connect";
    udp dport 1714-1764 udp sport 1714-1764 accept comment "KDE connect";
    
  }
  chain input {
    type filter hook input priority 0;

    ct state {established, related} accept

    ct state invalid drop comment "Drop invalid connection"
    
    iifname lo accept
    iif lo accept 

    tcp sport {http,https} accept
    tcp dport {http,https} accept
    tcp dport $ssh ip saddr $private accept
    tcp flags rst drop
    udp dport mdns ip6 daddr ff02::fb accept comment "Accept mDNS"
    udp dport mdns ip daddr 224.0.0.251 accept comment "Accept mDNS"
    ip saddr $private jump private
    reject with icmpx type port-unreachable
    jump portscan  
    jump synflood
  }
  chain forward {
    type filter hook forward priority 0;
    drop
  }
  chain output {
    type filter hook output priority 0;
  }
  chain synflood {
    ct state != new return;
    tcp flags != syn ct state new drop
    meter syn_scan { ip saddr limit rate 2/second burst 100 packets} return;
    limit rate 6/minute burst 10 packets log prefix "Drop synflood" level debug continue;
    drop;
  }
  chain portscan {
    tcp flags & (fin|syn) == fin|syn drop
    tcp flags & (syn|rst) == syn|rst drop 
    tcp flags & (fin|syn|rst|psh|ack|urg) < fin drop
    tcp flags & (ack | urg) == urg drop
    tcp flags & (psh | ack) == psh drop
    tcp flags & (fin|syn|rst|psh|ack|urg) == fin|psh|urg drop
    tcp flags & (syn|ack) == syn|ack ct state new drop
    tcp flags & (ack|urg) == urg counter drop      
  } 
}
table ip nat {
  chain prerouting {
    type nat hook postrouting priority -150; policy accept;
    fib daddr type local counter jump DOCKER
  }
  chain postrouting {
    type nat hook postrouting priority -150;
    oifname != "docker0" ip saddr 172.17.0.0/16 counter masquerade
    }
  chain output { 
        type nat hook output priority -100; policy accept;
        ip daddr != 127.0.0.0/8 fib daddr type local counter jump DOCKER
  }
  chain DOCKER {
        iifname "docker0" counter return
  }
}

table inet filter {
        chain input {
                type filter hook input priority 0;
        }
        chain forward {
                type filter hook forward priority 0;
        }
        chain output {
                type filter hook output priority 0;
        }
}
