(defwidget sep []
	(box 
		:class "seperator-box" 
		:vexpand "false" 
		:hexpand "false"
    	(label 
			:class "seperator" 
			:text "|"
		)
	)
)

(defwidget left []
	(box 
		:orientation "h" 
		:space-evenly "false" 
		:class "launcher-box"
		(button 
			:class "app-launcher" 
			:tooltip "Open Power Menu" 
			:onclick "~/.config/hypr/scripts/leave" "󱓞"
		)
	)
)

(defwidget clock []
	(box 
		:class "clock-box" 
		:space-evenly "false" 
		:hexpand "false" 
		:vexpand "false"
		(label 
			:class "time"
			:text {formattime(EWW_TIME, "%H:%M", "Asia/Tokyo")}
			:tooltip time
		)
	)
)

(defwidget music []
	(eventbox
		:class "music-box"
		(box
			:orientation "h"
			:valign "center"
			(box 
				:spacing 10 
				:space-evenly "false"
				(circular-progress
					:class "music-progress"
					:value "${music[2]}"
					:thickness 10 
				)
				(button 
					:class "music-button"
					:onclick "mpc -q toggle"
					:onrightclick "mpc -q next"
					(label 
						:class "song"
						:halign "start"
						:wrap "false"
						:text "${music[0]}"
						:tooltip "${music[0]}" 
					)
				)
				;;(label 
				;;	:class "song"
				;;	:halign "start"
				;;	:wrap "false"
				;;	:text ARTIST 
				;;)		
			)
		)
	)
)

(defwidget battery []
	;;(eventbox 
  	;;	:onhover "/usr/bin/eww -c $HOME/.config/eww/ update bat-reveal=true"
    ;;	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update bat-reveal=false"
    	(box 
			:class "battery-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "bat-icon" 
				:text "${battery[1]}"
			)
      		(label 
				:class "bat-label" 
				:text "${battery[0]}"
			)
      		;;(revealer 
			;;	:transition "slideright" 
			;;	:reveal bat-reveal 
			;;	:duration "350ms"
        	;;	(label 
			;;		:class "bat-label" 
			;;		:text "${battery[0]}")
			;;)
		;;)
 	) 
)

(defwidget wifi []
	(eventbox 
  		:onhover "/usr/bin/eww -c $HOME/.config/eww/ update wifi-reveal=true"
    	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update wifi-reveal=false"
    	(box 
			:class "wifi-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "wifi-icon" 
				:text network-icon
			)
      		(revealer 
				:transition "slideleft" 
				:reveal wifi-reveal 
				:duration "350ms"
        		(label 
					:class "wifi-label" 
					:text "${network[0]}"
				)
			)
		)
	)
)

(defwidget brightness []
  	(eventbox 
		:onhover "/usr/bin/eww -c $HOME/.config/eww/ update brightness-reveal=true"
    	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update brightness-reveal=false"
    	(box 
			:class "brightness-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "brightness-icon" 
				:text "󰃝"
			)
      		(revealer 
				:transition "slideright" 
				:reveal brightness-reveal 
				:duration "350ms"
        		(scale 
					:class "brightness-scale"
					:width 100 
					:active true 
					:value brightness-lvl 
					:min 0 
					:max 100 
					:orientation "h" 
					:onchange "brightnessctl set {}%"
				)
			)
		)
	)
)

(defwidget volume []
  	(eventbox 
		:onhover "/usr/bin/eww -c $HOME/.config/eww/ update volume-reveal=true"
    	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update volume-reveal=false"
    	(box 
			:class "volume-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "volume-icon" 
				:text ""
			)
      		(revealer 
				:transition "slideright" 
				:reveal volume-reveal 
				:duration "350ms"
        		(scale 
					:class "volume-scale" 
					:width 100 
					:active true 
					:value volume-lvl 
					:min 0 
					:max 101 
					:orientation "h" 
					:onchange "wpctl set-volume @DEFAULT_SINK@ {}%"
				)
			)
		)
	)
)

(defwidget bluetooth []
	(eventbox 
		:onhover "/usr/bin/eww -c $HOME/.config/eww/ update bluetooth-reveal=true"
    	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update bluetooth-reveal=false"
		(box 
			:class "bluetooth-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "bluetooth-icon" 
				:text "${bluetooth[1]}"
			)
      		(revealer 
				:transition "slideleft" 
				:reveal bluetooth-reveal 
				:duration "350ms"
				(label 
					:class "bluetooth-label" 
					:text "${bluetooth[0]}"
				)
			)
		)
	)
)

(defwidget weather []
	(eventbox 
  		:onhover "/usr/bin/eww -c $HOME/.config/eww/ update weather-reveal=true"
    	:onhoverlost "/usr/bin/eww -c $HOME/.config/eww/ update weather-reveal=false"
    	(box 
			:class "weather-box" 
			:orientation "h" 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false"
      		(label 
				:class "weather-icon" 
				:text "${weather[2]}"
			)
			(label 
				:class "weather-text"
				:text "${weather[1]}"
			)
      		(revealer 
				:transition "slideright" 
				:reveal weather-reveal 
				:duration "350ms"
        		(label 
					:class "weather-label" 
					:text "${weather[0]}"
				)
			)
		)
 	)
)
(defwidget end []
	(box 
		:orientation "h"
    	:space-evenly false
    	:halign "end"
    	:class "center-modules"
		(systray)
		(weather)
    	(bluetooth)
    	(volume)
    	(brightness)
    	(wifi)
    	(battery)
    	(sep)
    	(clock)
	)
)

(defwidget start []
	(box 
		:orientation "h"
    	:halign "start"
    	:class "start-modules"
;;    	(left)
	)
)

(defwidget center []
	(box 
		:orientation "h"
		:halign "center"
		:class "center"
		:space-evenly false
		(music)
	)
)

(defwidget bar-stuff []
	(box 
		:class "bar-class"
		:orientation "h"
    	(start)
		;;(center)
    	(end)
	)
)

;; =================== WINDOWS =====================

(defwindow bar
	:geometry 
		(geometry 
			:x "0%" 
			:y "0px" 
			:width "100%" 
			:height "20px" 
			:anchor "bottom center"
		)
	:stacking "fg"
	:windowtype "dock"
	:monitor 0
	:exclusive true
	:wm-ignore false
	(bar-stuff)
)

(defwindow system 
	:monitor 0 
	:stacking "fg" 
	:focusable "false" 
	:screen 1 
	:geometry 
		(geometry 
			:x 120 
			:y 710 
			:width 300 
			:height 283
		)
	(system)
)
